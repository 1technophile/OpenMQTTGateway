(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{444:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"option-3-upload-your-configurations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#option-3-upload-your-configurations"}},[e._v("#")]),e._v(" (Option 3) Upload your configurations")]),e._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("p",[e._v("This section is useful if you want to make an advanced project configuration not supported by the pre-built binaries.")]),e._v(" "),t("p",[e._v("Advanced configuration means changing the default pins, the MQTT topics, and all the expert parameters that you can find in "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/development/main/User_config.h",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("User_config.h")]),t("OutboundLink")],1),e._v(" and in all "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/tree/development/main",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("config_XX.h")]),t("OutboundLink")],1),e._v(" files. If you don't have to change the default parameters except Wi-Fi and MQTT broker settings, you don't need advanced configuration; you can go directly to the "),t("RouterLink",{attrs:{to:"/upload/binaries.html"}},[e._v("Upload Binaries")]),e._v(" section instead.")],1),e._v(" "),t("h2",{attrs:{id:"configure-upload-with-platformio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configure-upload-with-platformio"}},[e._v("#")]),e._v(" Configure & Upload with PlatformIO")]),e._v(" "),t("ul",[t("li",[e._v("Download the "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("CODE"),t("OutboundLink")],1),e._v(" from github.")]),e._v(" "),t("li",[e._v("Open the "),t("code",[e._v("OpenMQTTGateway")]),e._v(" folder")])]),e._v(" "),t("p",[e._v("You will find inside the folder a "),t("code",[e._v("platformio.ini")]),e._v(" config file. PlatformIO uses this file to define how to build OMG for different kinds of hardware. Not just that, but it also specifies which modules to turn on and off. And there's more: it also lets you configure the settings of those modules.")]),e._v(" "),t("p",[e._v('PlatformIO config files work on the concept of overriding. At first, a very simple base "environment" is specified that specifies common variables shared by all situations:')]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("framework")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("arduino")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("lib_deps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${libraries.picomqtt}\n  ${libraries.arduinojson}\n  ${libraries.arduinolog}\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("build_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  -w ; supress all warnings\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";  '-DLOG_LEVEL=LOG_LEVEL_TRACE'  ; Enable trace level logging")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("monitor_speed")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("115200")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v('Later "environments" get more specific, but inherit everything that was defined in this common environment:')]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("com-esp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("lib_deps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${env.lib_deps}           ; Inherit all the library dependencies from [env]\n  ${libraries.wifimanager}  ; Add another library dependency on top of them\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("build_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${env.build_flags}        ; Inherit all the build flags from [env]\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DsimpleReceiving")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("true'  ; Add some of our own build flags")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZmqttDiscovery")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"HADiscovery"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";'-DCORE_DEBUG_LEVEL=4'")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[e._v('Here, build flags starting with "-D" let us set configuration values you would normally find in '),t("code",[e._v("User_config.h")]),e._v(" and "),t("code",[e._v("config_xx.h")]),e._v(" files by specifying them here, overriding the default values set in those files. To include special characters, you can triple escape them with a backslash like so:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[e._v("  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-Dwifi_password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("\"Cato\\\\\\'sYounger\\\\\\$on\"' ; Cato'sYounger$on")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("The different listed configurations in "),t("code",[e._v("platformio.ini")]),e._v(" represent some standard environments and boards. For example, the environment")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env:nodemcuv2-pilight")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("sets the default settings for ESP8266 (NodeMCU v2) devices using the Plight module.")]),e._v(" "),t("h3",{attrs:{id:"option-a-creating-a-portable-config-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#option-a-creating-a-portable-config-file"}},[e._v("#")]),e._v(" "),t("em",[e._v("(Option A)")]),e._v(" Creating a portable config file")]),e._v(" "),t("p",[e._v("You could make your configuration changes directly by editing the values in "),t("code",[e._v("User_config.h")]),e._v(" (for main OMG settings) and "),t("code",[e._v("config_XX.h")]),e._v(" (for module-specific settings). You could also make most of those changes by instead writing some -D build flags in "),t("code",[e._v("platformio.ini")]),e._v(". But for maximum portability, a feature of PlatformIO allows you to make your configurations by creating a new file and listing all of your overrides there. This way, you can pull the latest OMG code changes without losing your configurations, or having to re-enter them manually.")]),e._v(" "),t("p",[e._v("To do this, create a file with a name ending in "),t("code",[e._v("_env.ini")]),e._v(", such as "),t("code",[e._v("production_env.ini")]),e._v(", into the root folder next to "),t("code",[e._v("platformio.ini")]),e._v(". PlatformIO will scan for all files ending in "),t("code",[e._v("_env.ini")]),e._v(" and use it to override the default values in "),t("code",[e._v("platformio.ini")]),e._v(".")]),e._v(" "),t("p",[e._v("At the top of your "),t("code",[e._v("*_env.ini")]),e._v(" file, for example, put the following to enable the ESP8266 (NodeMCU v2) with the Pilight module.")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("platformio")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("default_envs")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("nodemcuv2-pilight")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("This will make this environment the default environment for this PlatformIO project. If another environment isn't specified when building, it will default to this one.")]),e._v(" "),t("p",[e._v("For the rest of your config file, you can override the default configurations or add new configurations to existing environments in "),t("code",[e._v("platformio.ini")]),e._v(", or create a new environment. For example, if want to use both Pilight module and the BME280 module with an ESP8266, we can create a new environment. This is an example "),t("code",[e._v("my_env.ini")]),e._v(" file that creates two new environments:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("platformio")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("default_envs")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("nodemcuv2-pilight-bme280-ota")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env:nodemcuv2-pilight-bme280")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("env:nodemcuv2-pilight")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("lib_deps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${env:nodemcuv2-pilight.lib_deps}\n  ${libraries.bme280}\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("build_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${env:nodemcuv2-pilight.build_flags}\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DGateway_Name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"OpenMQTTGateway"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZsensorBME280")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"BME280"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DBase_Topic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"rf/"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DESPWifiManualSetup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("true'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-Dwifi_ssid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"mynetwork"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-Dwifi_password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("\"Cato\\\\\\'sYounger\\\\\\$on\"' ; Cato'sYounger$on")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DMQTT_USER")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"mqttusername"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DMQTT_PASS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"mqttpassword"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DMQTT_SERVER")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"mqttserver.local"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-Dgw_password")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"12345678"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DLED_RECEIVE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("LED_BUILTIN'        ; Comment 1")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DLED_RECEIVE_ON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("LOW'             ; Comment 2")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DRF_RECEIVER_GPIO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("13'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DRF_EMITTER_GPIO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("15'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DsimpleReceiving")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("false'")]),e._v("\n  '-UZmqttDiscovery'                 ; Disable HA discovery\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("monitor_speed")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("115200")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env:nodemcuv2-pilight-bme280-ota")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("env:nodemcuv2-pilight-bme280")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_protocol")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("espota")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_port")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("OpenMQTTGateway.local")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("--auth")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("otapassword")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("--port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("8266")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br")])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),t("p",[e._v("Adding manual WiFi and MQTT credentials to an environment also requires to define\n"),t("code",[e._v("'-DESPWifiManualSetup=true'")]),e._v("\nfor the credentials to be registered correctly.")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),t("p",[e._v("Manual network configuration (IP, netmask, gateway, DNS) requires to define\n"),t("code",[e._v("'-DNetworkAdvancedSetup=true'")]),e._v("\nand related network parameters, e.g.:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'-DNET_IP=\"192.168.1.99\"'\n'-DNET_MASK=\"255.255.255.0\"'\n'-DNET_GW=\"192.168.1.1\"'\n'-DNET_DNS=\"1.1.1.1\"'\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])])]),e._v(" "),t("p",[e._v("The first new environment we create, "),t("code",[e._v("nodemcuv2-pilight-bme280")]),e._v(", inherits the default "),t("code",[e._v("nodemcuv2-pilight")]),e._v(" environment in "),t("code",[e._v("platformio.ini")]),e._v(" with the "),t("code",[e._v("extends = env:nodemcuv2-pilight")]),e._v(" line. In the "),t("code",[e._v("lib_deps")]),e._v(" section, it imports all the "),t("code",[e._v("lib_deps")]),e._v(" of "),t("code",[e._v("nodemcuv2-pilight")]),e._v(" with the "),t("code",[e._v("${env:nodemcuv2-pilight.lib_deps}")]),e._v(" line, and adds BME280 on top of it. (Since the environment we're extending already has this "),t("code",[e._v("lib_deps")]),e._v(" attribute, specifying it again would normally replace it completely with our new attribute; instead, to keep its value but simply append to it, we import the original in the beginning of our "),t("code",[e._v("lib_deps")]),e._v(" attribute.) In the "),t("code",[e._v("build_flags")]),e._v(" section, it again imports all the "),t("code",[e._v("build_flags")]),e._v(" of "),t("code",[e._v("nodemcuv2-pilight")]),e._v(" and many of its own overrides, e.g. changing "),t("code",[e._v("Base_Topic")]),e._v(" found in "),t("code",[e._v("User_config.h")]),e._v(' from the default to "rf/" by using the '),t("code",[e._v("'-DBase_Topic=\"rf/\"'")]),e._v(" line. It also unsets previously set configurations (i.e. "),t("code",[e._v("mqttDiscovery")]),e._v(") by using "),t("code",[e._v("'-UZmqttDiscovery'")]),e._v(". This environment will work over serial upload.")]),e._v(" "),t("p",[e._v("The second new environment, "),t("code",[e._v("nodemcuv2-pilight-bme280-ota")]),e._v(", inherits everything we specified in the first environment (with the line "),t("code",[e._v("extends = env:nodemcuv2-pilight-bme280")]),e._v("), but modifies it to upload over OTA (Wi-Fi). We also specified this as the "),t("code",[e._v("default_env")]),e._v(" in the beginning of the file, so PlatformIO will choose this environment to build and upload if we don't specify otherwise.")]),e._v(" "),t("p",[e._v("The first time we're flashing OMG to the board, we can use the command "),t("code",[e._v("pio run --target upload --environment nodemcuv2-pilight-bme280")]),e._v(" to specify that we want to build and run the "),t("code",[e._v("nodemcuv2-pilight-bme280")]),e._v(" environment (over USB serial). Afterwards, we don't have to specify "),t("code",[e._v("--environment")]),e._v(" (e.g. just run "),t("code",[e._v("pio run --target upload")]),e._v(") to run the default "),t("code",[e._v("nodemcuv2-pilight-bme280-ota")]),e._v(" environment and update the code over the air.")]),e._v(" "),t("h3",{attrs:{id:"option-b-editing-files-directly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#option-b-editing-files-directly"}},[e._v("#")]),e._v(" "),t("em",[e._v("(Option B)")]),e._v(" Editing files directly")]),e._v(" "),t("p",[e._v("You can also modify the "),t("code",[e._v("User_config.h")]),e._v(" file and your modules' "),t("code",[e._v("config_XX.h")]),e._v(" files to your liking, and then edit the "),t("code",[e._v("platformio.ini")]),e._v(" file to uncomment the "),t("code",[e._v("default_envs")]),e._v(" lines corresponding to your board and chosen modules, like below:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = sonoff-basic-rfr3")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = rfbridge")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = esp32dev-all")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("default_envs")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("esp32dev-rf")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = esp32dev-ir")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = esp32dev-ble")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v(";default_envs = ttgo-lora32-v1")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("If you don't know which "),t("code",[e._v("env")]),e._v(" to activate, you can refer to "),t("a",{attrs:{href:"../prerequisites/devices"}},[e._v("devices")]),e._v(".")]),e._v(" "),t("p",[e._v("If you want to add more sensors or gateways to one "),t("code",[e._v("default_envs")]),e._v(" you can add the modules directly into your environment definition of your "),t("code",[e._v(".ini")]),e._v(" files or uncomment them in "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/d2dd6138558909b71cc44f69665340247bd5f356/main/User_config.h#L84",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("User_config.h")]),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Example to add IR to "),t("code",[e._v("esp32dev-rf")]),e._v(" add the "),t("code",[e._v("build_flags")]),e._v(" below to the env definition:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[e._v("  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZgatewayIR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"IR"\'')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env:esp32dev-rf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("platform")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("${com.esp32_platform}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("board")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("esp32dev")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("lib_deps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${com-esp.lib_deps}\n  ${libraries.rc-switch}\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("build_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${com-esp.build_flags}\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZgatewayRF")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"RF"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZgatewayIR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"IR"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DGateway_Name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"OpenMQTTGateway_ESP32_RF_IR"\'')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("Once your configuration is done you can upload the program to your board by clicking on the white arrow at the blue bottom bar of your PIO editor or with the following command:\n"),t("code",[e._v("pio run --target upload")])]),e._v(" "),t("p",[e._v("PIO will download the necessaries platform and libraries with the correct versions, build the code and upload it.")]),e._v(" "),t("p",[e._v("If you encounter errors the first thing to do is to clean your environment by using the white dust bin in the blue bottom bar of your PIO editor or with the following command:\n"),t("code",[e._v("pio run --target clean")])]),e._v(" "),t("p",[e._v("With some ESP it could be necessary to push the reset button when the upload begin.")]),e._v(" "),t("p",[e._v("If you want to erase the settings stored in the ESP memory use:\n"),t("code",[e._v("pio run --target erase")]),e._v("\nThis can be useful especially before the first upload or when you change the board partitions sizing.")]),e._v(" "),t("p",[e._v("Once done the gateway should connect to your network and your broker, you should see it into the broker in the form of the following messages:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("home/OpenMQTTGateway/LWT Online\nhome/OpenMQTTGateway/version\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("With PIO you can also upload the firmware through Over the Air, so as to do that you can add the upload options flags used below, "),t("code",[e._v("upload_port")]),e._v(" is the IP address of your ESP:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("env:esp32-ble")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("platform")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("${com.esp32_platform}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("board")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("esp32dev")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("board_build.partitions")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("min_spiffs.csv")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("lib_deps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${com-esp.lib_deps}\n  ${libraries.ble}\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("build_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  ${com-esp.build_flags}\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DZgatewayBT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"BT"\'')]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("'-DGateway_Name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v('"OpenMQTTGateway_ESP32"\'')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_protocol")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("espota")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_port")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("192.168.1.22")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("upload_flags")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("--auth")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("OTAPASSWORD")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[e._v("--port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[e._v("8266")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])]),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),t("p",[e._v("With the V0.9 we added the support of json for receiving and publishing.\nPer default Json reception and Json publication is activated, the previous simple reception mode is also activated to avoid regression on commands.")]),e._v(" "),t("p",[e._v("You can deactivate Json or simple mode following theses instructions:")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("jsonPublishing")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//define false if you don't want to use Json publishing (one topic for all the parameters)")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//example home/OpenMQTTGateway_ESP32_DEVKIT/BTtoMQTT/4XXXXXXXXXX4 {"rssi":-63,"servicedata":"fe0000000000000000000000000000000000000000"}')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("simplePublishing")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//define true if you want to use simple publishing (one topic for one parameter)")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//example")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// home/OpenMQTTGateway_ESP32_DEVKIT/BTtoMQTT/4XXXXXXXXXX4/rssi -63.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// home/OpenMQTTGateway_ESP32_DEVKIT/BTtoMQTT/4XXXXXXXXXX4/servicedata fe0000000000000000000000000000000000000000")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("simpleReceiving")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//define false if you don't want to use old way reception analysis")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("jsonReceiving")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//define false if you don't want to use Json  reception analysis")])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("If you are using platformio you can also comment the definitions above and define your parameters into platformio.ini file by setting the following "),t("code",[e._v("build_flags")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[e._v("  "),t("span",{pre:!0,attrs:{class:"token char"}},[e._v("'-DjsonPublishing=true'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token char"}},[e._v("'-DjsonReceiving=true'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token char"}},[e._v("'-DsimpleReceiving=true'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token char"}},[e._v("'-DsimplePublishing=true'")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("Note that depending on the environment the default platformio.ini has common option defined see sections:")]),e._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("com-arduino")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[e._v("com-esp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("If you want to use HASS MQTT discovery you need to have\n"),t("code",[e._v("#define jsonPublishing true")]),e._v("\n&\n"),t("code",[e._v('#define ZmqttDiscovery "HADiscovery"')]),e._v("\nuncommented.\nAdded to that auto discovery box should be selected into your Home Assistant MQTT integration configuration.")]),e._v(" "),t("p",[e._v("With an ESP if you did not set your network and MQTT parameters manually you can now open the "),t("RouterLink",{attrs:{to:"/upload/portal.html"}},[e._v("web portal configuration")]),e._v(".")],1),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),t("p",[e._v("simpleReceiving on Arduino boards doesn't accept 64 bits MQTT values, you can only send 32bits values from the MQTT broker.")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://hits.seeyoufarm.com",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fdocs.openmqttgateway.com%2Fupload%2Fbuilds.html&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false",alt:"Hits"}}),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);