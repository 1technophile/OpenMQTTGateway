(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{403:function(e,t,a){e.exports=a.p+"assets/img/OpenMQTTGateway_serial3.ee0b9e07.jpg"},458:function(e,t,a){"use strict";a.r(t);var s=a(14),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ir-gateway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ir-gateway"}},[e._v("#")]),e._v(" IR gateway")]),e._v(" "),t("p",[e._v("There is two methods for finding the IR codes you want to replicate:")]),e._v(" "),t("ol",[t("li",[e._v("Point the remote control to an IR receiver see "),t("a",{attrs:{href:"#receiving-data-from-ir-signal"}},[e._v("Receiving data from IR signal")]),e._v(" & "),t("a",{attrs:{href:"#send-data-by-mqtt-to-convert-it-on-ir-signal"}},[e._v("Send data by MQTT to convert it on IR signal")])]),e._v(" "),t("li",[e._v("Find the code corresponding to your devices with IR global cache database https://irdb.globalcache.com/ see "),t("a",{attrs:{href:"#send-data-by-mqtt-from-global-cach%C3%A9-database-to-convert-it-on-ir-signal"}},[e._v("Send data by MQTT from Global cache database to convert it on IR signal")])])]),e._v(" "),t("p",[e._v("Here is the "),t("a",{attrs:{href:"https://docs.google.com/spreadsheets/d/1rTDZIG8rm0dSf4vP7HdTdM4-aRY1nDWH4jK28_WRwHQ/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("List of protocols"),t("OutboundLink")],1),e._v(" supported by OMG, even if your device brand is not in the list you can still use raw IR data or GlobalCache database.")]),e._v(" "),t("h2",{attrs:{id:"receiving-data-from-ir-signal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receiving-data-from-ir-signal"}},[e._v("#")]),e._v(" Receiving data from IR signal")]),e._v(" "),t("p",[e._v("Subscribe to all the messages with mosquitto or open your MQTT client software:\n"),t("code",[e._v("mosquitto_sub -t +/# -v")]),e._v("\nAnd press your IR remote control in front of the receiver led you should see the following messages for example:")]),e._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("home/OpenMQTTGateway/IRtoMQTT "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"value"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("875849879")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"protocol"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"protocol_name"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("SAMSUNG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"bits"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"raw"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"4534,4432,612,518,614,516,616,1618,618,1616,618,512,618,1618,608,524,612,518,616,514,618,512,616,1618,616,1618,618,514,616,1618,616,514,616,514,618,512,616,1618,618,1618,618,514,610,1622,616,514,618,514,614,516,616,1618,618,512,618,512,618,1616,550,580,618,1616,612,1624,618,1616,618"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("With an hexadecimal value:")]),e._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"value"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("9938405643")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"protocol"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("55")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"bits"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("35")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"hex"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x25060090B"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"protocol_name"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"TECO"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("To receive big dump of raw data you need first to modify the "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/091b317660fd201a30e2cd0e15424a13c5a6bd71/config_IR.h#L41",target:"_blank",rel:"noopener noreferrer"}},[e._v("config_IR.h"),t("OutboundLink")],1),e._v(" and uncomment DumpMode true")]),e._v(" "),t("p",[e._v("Unknown protocols are filtered by default, if you want to see the unknown protocols set into "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/master/config_IR.h",target:"_blank",rel:"noopener noreferrer"}},[e._v("config_IR.h"),t("OutboundLink")],1),e._v(" "),t("code",[e._v("#define pubIRunknownPrtcl true")]),e._v(" instead of false")]),e._v(" "),t("p",[t("img",{attrs:{src:a(403),alt:"IR serial"}})]),e._v(" "),t("p",[e._v("You can take this code and try to reproduce it with the gateway either by using "),t("a",{attrs:{href:"#send-data-by-mqtt-to-convert-it-on-ir-signal"}},[e._v("decimal value")]),e._v(" or the "),t("a",{attrs:{href:"#send-raw-ir-data-by-mqtt"}},[e._v("raw value")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"send-data-by-mqtt-to-convert-it-on-ir-signal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send-data-by-mqtt-to-convert-it-on-ir-signal"}},[e._v("#")]),e._v(" Send data by MQTT to convert it on IR signal")]),e._v(" "),t("p",[e._v("With the IR gateway you need to put on the topic the protocol_name you want to use to send the signal, the different protocols implemented are "),t("a",{attrs:{href:"https://github.com/crankyoldgit/IRremoteESP8266/blob/f9d7e5c622670132731e3f9c64d9132128eb320c/src/IRremoteESP8266.h#L299",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Exhaustive list "),t("a",{attrs:{href:"https://docs.google.com/spreadsheets/d/1_5fQjAixzRtepkykmL-3uN3G5bLfQ0zMajM9OBZ1bx0/edit#gid=1910001295",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("For example if I want to send a command to a Sony TV you can use the following command:")]),e._v(" "),t("p",[t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"value":551489775,"protocol_name":"SONY"}\'')])]),e._v(" "),t("p",[e._v("The code after the -m represent the payload you want to send.")]),e._v(" "),t("p",[e._v("You could alternatively use an hex value (bits is the number of hexadecimal values):\n"),t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"hex":"0x250600090B","bits":5,"protocol_name":"TECO"}\'')])]),e._v(" "),t("p",[e._v("or")]),e._v(" "),t("p",[t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"hex":"0xA6BCF20040600020000000000519","bits":14,"protocol_name":"HAIER_AC_YRW02"}\'')])]),e._v(" "),t("p",[e._v("If you donâ€™t want to use special parameters for IR just use value key, the protocol per default is NEC")]),e._v(" "),t("p",[t("code",[e._v("mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m '{\"value\":551489775}'")])]),e._v(" "),t("p",[e._v("NOTE: on Arduino Uno most of the protocols are not enable per default due to memory constraints (it is not the case for MEGA), to enable them go to "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/master/main/User_config.h",target:"_blank",rel:"noopener noreferrer"}},[e._v("User_config.h"),t("OutboundLink")],1),e._v(" and uncomment the #define corresponding the protocols you want:")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_COOLIX")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_Whynter")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_LG")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_Sony")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_DISH")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_RC5")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//#define IR_Sharp")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("IR_SAMSUNG")])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h2",{attrs:{id:"send-data-by-mqtt-from-global-cache-database-to-convert-it-on-ir-signal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send-data-by-mqtt-from-global-cache-database-to-convert-it-on-ir-signal"}},[e._v("#")]),e._v(" Send data by MQTT from Global CachÃ© database to convert it on IR signal")]),e._v(" "),t("p",[e._v("The website https://irdb.globalcache.com/ contains an important database of IR codes of various devices brand. By registering and asking the code you will receive a code as the example below:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("code1: sendir,1:1,1,38000,1,69,340,169,20,20,20,20,20,64,20,20,20,20,20,20,20,20,20,20,20,64,20,64,20,20,20,64,20,64,20,64,20,64,20,64,20,64,20,64,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,64,20,64,20,64,20,64,20,64,20,64,20,1544,340,85,20,3663\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("Extract this part of the code:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("38000,1,69,340,169,20,20,20,20,20,64,20,20,20,20,20,20,20,20,20,20,20,64,20,64,20,20,20,64,20,64,20,64,20,64,20,64,20,64,20,64,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,64,20,64,20,64,20,64,20,64,20,64,20,1544,340,85,20,3663\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("and publish it to MQTT with the subject containing IR_GC:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"raw":"38000,1,1,171,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,21,21,21,21,21,21,64,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,21,21,64,21,64,21,64,21,64,21,1114","protocol_name":"GC"}\'\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("You should be able to command your devices without having listened with the IR receiver or if your protocol is unknown by the IRremote library")]),e._v(" "),t("h2",{attrs:{id:"send-data-by-mqtt-with-advanced-ir-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send-data-by-mqtt-with-advanced-ir-parameters"}},[e._v("#")]),e._v(" Send data by MQTT with advanced IR parameters")]),e._v(" "),t("p",[e._v("IR sending support two advanced parameters; bits length and repeat number.")]),e._v(" "),t("p",[e._v("The example below will send the following advanced parameters bits: 14 and repeat:4 times for a Sony protocol:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"value":551489775,"protocol_name":"NEC","repeat":4,"bits":14}\'\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"send-raw-ir-data-by-mqtt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send-raw-ir-data-by-mqtt"}},[e._v("#")]),e._v(" Send raw IR data by MQTT")]),e._v(" "),t("p",[e._v("Publish your code like below")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mosquitto_pub -t home/OpenMQTTGateway/commands/MQTTtoIR -m \'{"raw":"8850,4450,600,550,550,550,600,1600,600,550,600,500,600,500,600,550,600,500,600,1650,600,1600,600,550,600,1600,600,1650,600,1600,600,1650,600,1600,600,550,600,500,600,550,550,1650,600,500,600,550,600,500,600,550,550,1650,600,1650,550,1650,600,550,550,1650,600,1650,550,1650,600,1650,600","protocol_name":"Raw"}\'\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("With big raw array you may cross the limit of default payload size. In this case the gateway will not receive the message or will not send it to the broker.\nIn this case the best way is to use hex values instead, but if you can't you may change the parameters below:\nIn User_config.h replace:")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("JSON_MSG_BUFFER")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[e._v("512")])])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("by")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[e._v("JSON_MSG_BUFFER")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1280")])])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"repeat-the-ir-signal-openmqttgateway-receive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repeat-the-ir-signal-openmqttgateway-receive"}},[e._v("#")]),e._v(" Repeat the IR signal OpenMQTTGateway receive")]),e._v(" "),t("p",[e._v("So as to repeat the IR signal received by the gateway once set the following parameter to true in "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/091b317660fd201a30e2cd0e15424a13c5a6bd71/config_IR.h#L37",target:"_blank",rel:"noopener noreferrer"}},[e._v("config_IR.h"),t("OutboundLink")],1),e._v(" "),t("code",[e._v("#define repeatIRwMQTT true")])]),e._v(" "),t("h2",{attrs:{id:"raw-ir-signal-forwarding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raw-ir-signal-forwarding"}},[e._v("#")]),e._v(" Raw IR signal forwarding")]),e._v(" "),t("p",[e._v("So as to repeat the raw IR signal received by the gateway, uncomment and set the following parameter to true in "),t("a",{attrs:{href:"https://github.com/1technophile/OpenMQTTGateway/blob/091b317660fd201a30e2cd0e15424a13c5a6bd71/config_IR.h#L39",target:"_blank",rel:"noopener noreferrer"}},[e._v("config_IR.h"),t("OutboundLink")],1),e._v(" "),t("code",[e._v("#define RawDirectForward true")])])])}),[],!1,null,null,null);t.default=r.exports}}]);